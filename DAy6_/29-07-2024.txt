f=lambda x=10,y=13 : x**2+y**2+x*y/3+56/y+78
print(type(f))
#X=10,Y=13
#positional arguments
g=f(10,13)
print(g)
# keyword arguments
g=f(y=13,x=10)
print(g)
g=f()
print(g)
######################################
f=(lambda x=10,y=13 : x**2+y**2+x*y/3+56/y+78)()
print(f)

f=(lambda x=10,y=13 : x**2+y**2+x*y/3+56/y+78)(x=6,y=2)
print(f)

g=(lambda m: "Test" if m>=67 else "Waao")(40)
print(g)

f=(lambda x :x!=78)(45)
print(f)
################################################
seq1=[67,24,56,89,78,45,90,92,89]
f=filter((lambda x: x%2!=0),seq1)
print(f)
h=list(f)#tuple(f)
print(h)
###################################
str1="I122N33D343I33@333     D454E34r3L444H67734I"
f=filter(lambda x : not x.isdigit(),str1)
f=list(f)
print(f)
g=''.join(f)
print(g)
########################################
str1="I122N33D343I33@333     D454E34r3L444H67734I"
print(str1)
f=''.join(filter(lambda x : not x.isdigit(),str1))
print(f)
#########################################
# create a list of 1000 random integer numbers ?
from random import randint
list_r=[]
for i in range(1000):
    list_r.append(randint(10,67))
    
print(list_r)
#list comprehension in python    
# [value for loop_var in iterObject]  
list_r=[randint(10,67) for n in range(1000)] 
print(list_r)
 ######################################################
#list comprehension in python    
# [value for loop_var in iterObject]  
# list_r=[randint(10,67) for n in range(1000)] 
# print(list_r)
# [value for loop_var in iterObject if exp] 
a=[n for n in range(50) if n%2!=0]
print(a)
# [value for loop_var in iterObject if exp1 if exp2] 
a=[n for n in range(50) if n%2!=0 if n%5==0]
print(a)

# [value if exp else value2 for loop_var in iterObject ] 
a=[n if n%2!=0 else None for n in range(1,20) ]
print(a)
###########################################################
str1="I122N33D343I33@333     D454E34r3L444H67734I"
print(str1)
# f=''.join(filter(lambda x : not x.isdigit(),str1))
f=''.join(filter(lambda x : x not in [str(n) for n in range(10)],str1))
print(f)
#############################################################
sq=[1,2,3,4,5]
g=list(map(lambda x : x+3,sq))
print(g)
#############################################################
seq=[n*34.6 for n in range(1,17)]
print(seq)

g=0
for i in seq:
    g=g+i 
    
print(g)
from functools import reduce 
g=reduce(lambda x,y: x+y, seq)
print(g)
###########################################################
def connect():
    try:
        import psycopg2 as pg 
        conn=pg.connect(user="nishant",password='1234',port='5432',
                        database="learning",host='127.0.0.1')
        cur=conn.cursor()
        return conn,cur 
    except Exception as e:
        print('Error :-',e.__class__.__name__)
        print("Msg:-",e)
        conn=None
        cur=None
        return conn,cur
    
if __name__=="__main__":
    conn,cur=connect()
    if conn != None:
        conn.close()

##############################################################
from db_connect import connect 
conn,cur=connect()
if conn!=None:
    sql="""create table if not exists AMD01(
    id int primary key not null,
    name text not null,
    age int not null ,
    address varchar(20),
    salary real  )
    """
    cur.execute(sql)
    conn.commit()
    conn.close()
else:
    print("Conn. Failed")
#########################################################
from db_connect import connect 
conn,cur=connect()
if conn!=None:
    sql="""create table if not exists AMD02(
    id serial primary key not null,
    name text not null,
    age int not null ,
    address varchar(20),
    salary real  )
    """
    cur.execute(sql)
    conn.commit()
    conn.close()
else:
    print("Conn. Failed")
##################################################################
from db_connect import connect 
conn,cur=connect()
if conn!=None:
    sql="insert into amd01 (id,name,age,address,salary) values (4,'Raj',45,null,67.89)"
    cur.execute(sql)
    conn.commit()
    conn.close()
else:
    print("Conn. Failed")
###############################################################
from db_connect import connect 
conn,cur=connect()
if conn!=None:
    #Sql_Inj
    row=(6,'Raj',45,None,None)#python Data Type
    sql="insert into amd01 (id,name,age,address,salary) values (%s,%s,%s,%s,%s)"
    cur.execute(sql,row)
    conn.commit()
    conn.close()
else:
    print("Conn. Failed")
###################################################################
from db_connect import connect 
conn,cur=connect()
if conn!=None:
    #Sql_Inj
    #python Data Type List of Tuples
    rows=[(1891,'Manisha',14,None,None),(111,'Dongli',54,"florida us",34556.799),
             (121,'Mr.Wu',38,"near lake,Boston",34.908),(131,'Manisha',14,None,None),
             (141,'Rajesh',98,None,45.798),(151,'Jhon',94,None,None)]
    
    sql="insert into amd01 (id,name,age,address,salary) values (%s,%s,%s,%s,%s)"
    cur.executemany(sql,rows)
    conn.commit()
    conn.close()
else:
    print("Conn. Failed")
########################################################################
#insert The Given Data Into Table 1
    rows=[(18911,None,14,None,'Manisha'),(111,34556.799,54,"florida us",'Dongli'),
             (121,34.908,38,"near lake,Boston",'Mr.Wu'),(131,None,14,None,'Manisha'),
             (141,45.798,98,None,'Rajesh'),(151,None,94,None,'Jhon')]
############################################################################
#insert The Given Data Into Table 2
    rows=[(None,14,None,'Manisha'),(34556.799,54,"florida us",'Dongli'),
             (34.908,38,"near lake,Boston",'Mr.Wu'),(None,14,None,'Manisha'),
             (45.798,98,None,'Rajesh'),(None,94,None,'Jhon')]
###########################################################################
from db_connect import connect 
conn,cur=connect()
if conn!=None:
    #Sql_Inj
    #python Data Type List of Tuples
    rows=[(18911,None,14,None,'Manisha'),(1111,34556.799,54,"florida us",'Dongli'),
             (1211,34.908,38,"near lake,Boston",'Mr.Wu'),(1311,None,14,None,'Manisha'),
             (1411,45.798,98,None,'Rajesh'),(1511,None,94,None,'Jhon')]
    
    sql="insert into amd01 (id,salary,age,address,name) values (%s,%s,%s,%s,%s)"
    cur.executemany(sql,rows)
    conn.commit()
    conn.close()
else:
    print("Conn. Failed")

################################################################################
from db_connect import connect 
conn,cur=connect()
if conn!=None:
    #Sql_Inj
    #python Data Type List of Tuples
    rows=[(None,14,None,'Manisha'),(34556.799,54,"florida us",'Dongli'),
             (34.908,38,"near lake,Boston",'Mr.Wu'),(None,14,None,'Manisha'),
             (45.798,98,None,'Rajesh'),(None,94,None,'Jhon')]
    
    sql="insert into amd02 (salary,age,address,name) values (%s,%s,%s,%s)"
    cur.executemany(sql,rows)
    conn.commit()
    conn.close()
else:
    print("Conn. Failed")
###################################################################
from db_connect import connect 
conn,cur=connect()
if conn!=None:
    #Sql_Inj
    sql="select * from amd01 order by id"
#     sql="select name,salary,age from amd01 order by id"
    cur.execute(sql)
#     for i in enumerate(cur): # [(0,row1),(1,row2),...]
#         print(f"{i[0]+1}.",i[1])
#     f=cur.fetchone() #one row
#     f=cur.fetchmany() #List of one row
#     f=cur.fetchmany(3) #List of 3 rows
#     f=cur.fetchmany(-1) #List of all the rows
    f=cur.fetchall() #List of all the rows
    print(f)
   
    conn.close()
else:
    print("Conn. Failed")

#####################################################
from db_connect import connect
import psycopg2 as pg
conn,cur=connect()
if conn!=None:
    #Sql_Inj
    #python Data Type List of Tuples
    
    try:
        rows=[(18911,None,14,None,'Manisha'),(1111,34556.799,54,"florida us",'Dongli'),
             (1211,34.908,38,"near lake,Boston",'Mr.Wu'),(1311,None,14,None,'Manisha'),
             (1411,45.798,98,None,'Rajesh'),(901,None,94,None,'Jhon')]
    
        sql="insert into amd01 (id,salary,age,address,name) values (%s,%s,%s,%s,%s) on conflict do nothing"
        cur.executemany(sql,rows)
    except pg.IntegrityError as e:
        conn.rollback()
        print(e)
    else:
        conn.commit()
    conn.close()
    
else:
    print("Conn. Failed")
#####################################################
from db_connect import connect 
conn,cur=connect()
if conn!=None:
    #Sql_Inj
#     sql="select * from amd01 where id=%s"
#     row=(111,)
#     sql="select * from amd01 where name=%s"
#     row=("Manisha",)
    sql="select * from amd01 where name=%s and age=%s"
    row=("Manisha",23)
#     sql="select name,salary,age from amd01 order by id"
    cur.execute(sql,row)
#     for i in enumerate(cur): # [(0,row1),(1,row2),...]
#         print(f"{i[0]+1}.",i[1])
    f=cur.fetchall() #List of all the rows
    print(f)
   
    conn.close()
else:
    print("Conn. Failed")
##############################################################
from db_connect import *
import time
conn,cur=connect()
if conn !=None:
    try:
        sql="select * from amd01"
        cur.execute(sql)
        print("====Rows Before Update==================")
        for row in enumerate(cur):
            print(f"{row[0]+1}. ",row[1])
        print("========rows updating================")
#         sql="update amd01 set name=%s where name=%s"
#         data=('Nishant',"Manish")
        sql="update amd01 set name=%s,age=%s where name=%s or age=%s"
        data=('Nishant',45,"Manisha",67)
        cur.execute(sql,data)



        conn.commit()
        time.sleep(4)
        print("========rows updated==================")

        time.sleep(1)
        sql="select * from amd01"
        cur.execute(sql)
        print("====Rows After Update==================")
        for row in enumerate(cur):
            print(f"{row[0]+1}. ",row[1])
            
        conn.close()    
    except Exception as e:
        print(e.__class__.__name__,"Error Solved!",e)
#####################################################################
