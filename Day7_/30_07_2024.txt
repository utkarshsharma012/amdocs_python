class demo:
    print('This is demo class')
    var=90#public
    
print(demo.var )   #90# get the value from the class demo memory
#create the object of the class
obj1=demo()
print(obj1)
print(obj1.var)#90
obj1.var+=10 # update the value of var within obj1 memory 
print(demo.var)#90
print(obj1.var)#100

obj2=demo() # new object
print(obj2.var)#90
#################################
class demo:
    var=90
    def gold(self,fname,age=56):
        print('This is glod method!')
        name=fname+' '+'Sharma'
        return age,name#{'age':age,'fname':fname}#[age,name]
        
############################################################        
obj1=demo()
print(obj1)
print(obj1.var)
#calling of the method
v=obj1.gold('Manish',67)
print(v)
############################################
obj2=demo()
h=obj2.gold(age=34, fname='Raj')
print(h)
################################################
class demo:
    var=90
    def gold(self,fname,age=56):
        print('This is glod method!')
        name=fname+' '+'Sharma'
        self.var+=10# update the value within the object memory of data var
        return age,name,self.var#(get and return the value from the its object memory)
#         return age,name,demo.var#(get and return the value from the its class memory)
        
        
            
############################################################        
obj1=demo()
#calling of the method
v=obj1.gold('Manish',67)
print(v)
############################################
obj2=demo()
h=obj2.gold(age=34, fname='Raj')
print(h)

########################################
class demo:
    var=90
    name=None
    def gold(self,fname,age=56):
        print('This is glod method!')
        name=fname+' '+'Sharma' #local
        #create an attribute name
        self.name=name # create an attribute at object level
#         demo.name=name # create an attribute at class level
        return age,name,self.var

    def out(self):
        name1=self.name.split(' ')[0]+' Meena' 
        return name1   
            
        
       
        
        
        
############################################################        
obj1=demo()
#calling of the method
v=obj1.gold('Manish',67)
print(v)
m=obj1.out()
print(m)
############################################
obj2=demo()
h=obj2.gold(age=34, fname='Raj')
print(h)
m1=obj2.out()
print(m1)
####################
obj3=demo()
print(obj3.name)
############################################
class demo:
    var=90
    name=None
    def gold(self,fname,age=56):
        print('This is glod method!')
        name=fname+' '+'Sharma' 
        self.name=name
        return age,name,self.var

    def out(self,fname,dept):
        self.gold(fname=fname, age=56)# calling a method inside another method
        name1=self.name.split(' ')[0]+' Meena' 
        return name1  ,dept 
            
        
       
        
        
        
############################################################        
obj1=demo()
#calling of the method
m=obj1.out('Manish','L&D')
print(m)
############################################
obj2=demo()
m1=obj2.out("Raj","IT")
print(m1)
####################
obj3=demo()
print(obj3.name)
##############################################################
class details:
    print("This is details class")
    var=0
    def __init__(self,email="admin@test.com",name="Raj",mobileno=798547):
        print("This is __init__ method.",email)
        self.email=email
        
    def out(self):
        print(self.email)
        

obj1=details("Test@gmail.com","Manish",898585547)
obj2=details()
obj1.out()
##########################################################
class details:
    print("This is details class")
    var=0
    def __init__(self,email="admin@test.com",name="Raj",mobileno=798547):
        print("This is __init__ method.",email)
        self.email=email
        self.name=name
        self.mobileno=mobileno
        self.data=True
    
#     def __repr__(self): 
    def __str__(self):
        return f"User(name:- {self.name}, email:- {self.email})"
        
    def out(self):
        print(self.email)
        

obj1=details("Test@gmail.com","Manish",898585547)
print(obj1)
obj2=details()
print(obj2)

#############################################################
class Vehicle:
    def general_usage(self):
        print("general use: transporation")

class Car:
    def __init__(self):
        print("I'm car")
        self.wheels = 4
        self.has_roof = True

    def specific_usage(self):
        
        print("specific use: commute to work, vacation with family")

class MotorCycle:
    def __init__(self):
        print("I'm motor cycle")
        self.wheels = 2
        self.has_roof = False

    def specific_usage(self):
        print("specific use: road trip, racing")
########################################################
class Vehicle:
    var=90
    def general_usage(self):
        print("general use: transporation")

class Car(Vehicle):
    var=56
    def __init__(self):
        print("I'm car")
        self.wheels = 4
        self.has_roof = True

    def specific_usage(self):
        print(self.var,Vehicle.var)#56,90
        self.general_usage()
        print("specific use: commute to work, vacation with family")

c=Car()
print(c.wheels)
print("=======From inside specific_usage=======")
c.specific_usage()
print("=======End=======")
c.general_usage()
print(c.var)#56
print(Vehicle.var)#90
#########################################################
class Father:
    def gardening(self):
        print("I enjoy gardening")

class Mother:
    def cooking(self):
        print("I love cooking")

class Child:
    def  skills(self):
        print("I enjoy sports")
#############################################################
#Multiple Inheritance
class Father:
    def gardening(self):
        print("I enjoy gardening")

class Mother:
    def cooking(self):
        print("I love cooking")

class Child(Mother,Father):
    def  skills(self):
        print("I enjoy sports")

c=Child()
c.skills()
c.gardening()
c.cooking()
##########################################
#Multilevel Inheritance
class Father:
    def gardening(self):
        print("I enjoy gardening")

class Mother(Father):
    def cooking(self):
        print("I love cooking")

class Child(Mother):
    def  skills(self):
        print("I enjoy sports")

c=Child()
c.skills()
c.gardening()
c.cooking()
###############################################
#Multilevel Inheritance
# Method overriding
class Father:
    def skills(self):
        print("I enjoy gardening")

class Mother(Father):
    def skills(self):
        print("I love cooking")

class Child(Mother):
    def  skills(self):
        Father.skills(self)
        Mother.skills(self)
        print("I enjoy sports")

c=Child()
c.skills()
###################outside class###############
Father.skills(c)
Mother.skills(c)

###################################################
#Multiple Inheritance
# Method overriding
class Father:
    def skills(self):
        print("I enjoy gardening")

class Mother:
    def skills(self):
        print("I love cooking")

class Child(Mother,Father):
    def  skills(self):
        Father.skills(self)
        Mother.skills(self)
        print("I enjoy sports")

c=Child()
c.skills()
###################outside class###############
Father.skills(c)
Mother.skills(c)
###########################################################
#Multilevel Inheritance
# Method overriding
#Method overloading
class Father:
    def __init__(self,fname):
        self.fname=fname
    def skills(self):
        print("I enjoy gardening",self.fname)

class Mother(Father):
    def __init__(self,mname,fname):
        super().__init__(fname)# load the value into the __init__ method of Father class
        self.mname=mname
    def skills(self):
        print("I love cooking",self.mname)
        
# m=Mother('Ma',"Paa")
# Father.skills(m)


class Child(Mother):
    def __init__(self,mname,fname,name):
        super().__init__(mname, fname)
        self.name=name
    def  skills(self):
        Father.skills(self)
        Mother.skills(self)
        print("I enjoy sports",self.name)
 
c=Child('Maa',"Paa","Mee")
c.skills()
##############################################################
# Error ? Solve The Error ? 
#Multiple Inheritance
# Method overriding
#Method overloading
class Father:
    def __init__(self,fname):
        self.fname=fname
    def skills(self):
        print("I enjoy gardening",self.fname)

class Mother:
    def __init__(self,mname):
        self.mname=mname
    def skills(self):
        print("I love cooking",self.mname)
    

class Child(Mother,Father):
    def __init__(self,mname,fname,name):
#         super().__init__(mname)
#         super().__init__(fname)
        self.name=name
    def  skills(self):
        Mother.skills(self)
        Father.skills(self)
        
        print("I enjoy sports",self.name)
 
c=Child('Maa',"Paa","Mee")
c.skills()
#################################################################
class details:
    def __init__(self,name,age,dept):
        self.name=name #public
        self.__age=age #private
        self._dept=dept#protected 
        print(self.__age)
        
        
obj=details('Manish',34,"L&D")
print(obj.name)
obj.name="Raj"
print(obj.name)

print(obj.__age)
###########################################
# Error Solved .
#Multiple Inheritance
# Method overriding
#Method overloading
class Father:
    def __init__(self,fname):
        self.__fname=fname
    def skills(self):
        print("I enjoy gardening",self.__fname)

class Mother:
    def __init__(self,mname):
        self.mname=mname
    def skills(self):
        print("I love cooking",self.mname)
    

class Child(Mother,Father):
    def __init__(self,mname,fname,name):
        Father.__init__(self, fname)
        Mother.__init__(self, mname)
        self.name=name
    def  skills(self):
        Mother.skills(self)
        Father.skills(self)
        
        print("I enjoy sports",self.name)
 
c=Child('Maa',"Paa","Mee")
c.skills()

