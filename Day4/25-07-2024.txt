d={'name':'Manish',('dept','other'):[["L&D"],[1,2,3]],'name':["Manish",'Rahul','SitaRama'],
   4576563447.78:'%*#%(*(sghdh$&98855JBJ8^%$)'}
print(d)
print(id(d),type(d),len(d))
#######Retrieve The Values from The Dict Using Keys###############
g=d.values()
print(g)
print(type(g))
values=[]
for i in g:
    values.append(i)
    
print("The Values List:-",values[])

#############################################################
d={'name':'Manish',('dept','other'):[["L&D"],[1,2,3]],'name':["Manish",'Rahul','SitaRama'],
   4576563447.78:'%*#%(*(sghdh$&98855JBJ8^%$)'}
print(d)
print(id(d),type(d),len(d))
#######Retrieve The Values from The Dict Using Keys###############

g=d.keys()#d.values()
print(g)
print(type(g))
values=[]
keys=[]
for i in g:
    values.append(d[i])# value=dict_obj[key]
    keys.append(i)
     
print("The Values List:-",values)
print("THe List of Keys:-",keys)

#######################################################
d={'name':'Manish',('dept','other'):[["L&D"],[1,2,3]],'name':["Manish",'Rahul','SitaRama'],
   4576563447.78:'%*#%(*(sghdh$&98855JBJ8^%$)'}
print(d)
print(id(d),type(d),len(d))
#######Retrieve The Values from The Dict Using Keys###############
# value_1=d['name1']# value=dict_obj[key]
# value_1=d.get('name','Key Not found!')
# print(value_1)
# for i in d: # keys
#     print(i,'===',d[i])
g=d.items()#d.keys()#d.values() #[(key1,value1),(key2,value2),(key3,value3)]
print(g)
print(type(g))
values=[]
keys=[]
for key,value in g:
    values.append(value)
    keys.append(key)
  
      
print("The Values List:-",values)
print("THe List of Keys:-",keys)
################################################################
a=[['Manish', 'Rahul', 'SitaRama'], [['L&D'], [1, 2, 3]], '%*#%(*(sghdh$&98855JBJ8^%$)']
b=['name', ('dept', 'other'), 4576563447.78]
#Create a dict object from two lists################
###one List > keys (immutable)
###2nd List > Values
g=zip(b,a)
d=dict(g)
print(d)
################################################
d={'name':'Manish',('dept','other'):[["L&D"],[1,2,3]],'name':["Manish",'Rahul','SitaRama'],
   4576563447.78:'%*#%(*(sghdh$&98855JBJ8^%$)'}
print(d)
print(id(d),type(d),len(d))
#######Retrieve The Values from The Dict Using Keys###############
# value_1=d['name1']# value=dict_obj[key]
# value_1=d.get('name','Key Not found!')
# print(value_1)
# for i in d: # keys
#     print(i,'===',d[i])
g=d.items()#d.keys()#d.values() #[(key1,value1),(key2,value2),(key3,value3)]
print(g)
print(type(g))
values=[]
keys=[]
for key,value in g:
    values.append(value)
    keys.append(key)
  
      
print("The Values List:-",values)
print("THe List of Keys:-",keys)
print("Back 2 Dict:-",dict(zip(keys,values)))
#######################################################################################
d={'name':'Manish',('dept','other'):[["L&D"],[1,2,3]],'name':["Manish",'Rahul','SitaRama'],
   4576563447.78:'%*#%(*(sghdh$&98855JBJ8^%$)'}
print("d:- ",d)
print(id(d),type(d),len(d))
d1={"one":{"1":1,"2":2},"two":2}
print("d1:- ",d1)
print(id(d1),type(d1),len(d1))
#################update#######################
##update an existing key value >>>>>>>>>>>
d['name']='Test'
#######add new pair within the dict d #########
d['New Key']='New Value'
#########update dict d with the pairs of dict d1#########
d.update(d1)
print(d)
print(id(d),type(d),len(d))
###############################################
d={'name':'Manish',('dept','other'):[["L&D"],[1,2,3]],'name':["Manish",'Rahul','SitaRama'],
   4576563447.78:'%*#%(*(sghdh$&98855JBJ8^%$)'}
print("d:- ",d)
print(id(d),type(d),len(d))
d1={"one":{"1":1,"2":2},"two":2}
print("d1:- ",d1)
print(id(d1),type(d1),len(d1))
############create dict d3 with the pairs of dict d and d1 ?##############
######Note:- without any change in d and d1####################
#######3 lines#########
######2 Lines#########
#####1 lines ###########################
d3=
print("d3:- ",d3)
print(id(d3),type(d3),len(d3))


print(d3 is d)#F
print(d3 is d1)#F
############################################################
d={'name':'Manish',('dept','other'):[["L&D"],[1,2,3]],'name':["Manish",'Rahul','SitaRama'],
   4576563447.78:'%*#%(*(sghdh$&98855JBJ8^%$)'}
print("d:- ",d)
print(id(d),type(d),len(d))
d1={"one":{"1":1,"2":2},"two":2}
print("d1:- ",d1)
print(id(d1),type(d1),len(d1))
############create dict d3 with the pairs of dict d and d1 ?##############
######Note:- without any change in d and d1####################
#######3 lines#########
# d3={}
# d3.update(d)
# d3.update(d1)
######2 Lines#########
d3=d.copy()
d3.update(d1)
#####1 lines ###########################

print("d3:- ",d3)
print(id(d3),type(d3),len(d3))


print(d3 is d)#F
print(d3 is d1)#F
#####################################################
a=(1,2,3,4)
b=[5,6,"Test",8]
#create a list c with the  values of  tuple a and list b >  c=[1,2,3,4,5,6,7,8] in one line without using + .
# c=a.copy()# if a is list
# c.extend(b)
c=[*a,*b] # *args > arrays
print(c)
print(c is a)
print(c is b)
print(id(a))
print(id(a[0]))
##############################################

d={'name':'Manish',('dept','other'):[["L&D"],[1,2,3]],'name':["Manish",'Rahul','SitaRama'],
   4576563447.78:'%*#%(*(sghdh$&98855JBJ8^%$)'}
d1={"one":{"1":1,"2":2},"two":2}


d3={**d,**d1}# **Kwargs > dict
print(d3)
print(type(d3))
###############################################
d={'name':'Manish',('dept','other'):[["L&D"],[1,2,3]],'name':["Manish",'Rahul','SitaRama'],
   4576563447.78:'%*#%(*(sghdh$&98855JBJ8^%$)'}
print("d:- ",d)
print(id(d),type(d),len(d))
d1={"one":{"1":1,"2":2},"two":2}
print("d1:- ",d1)
print(id(d1),type(d1),len(d1))
############create dict d3 with the pairs of dict d and d1 ?##############
######Note:- without any change in d and d1####################
#######3 lines#########
# d3={}
# d3.update(d)
# d3.update(d1)
######2 Lines#########
# d3=d.copy()
# d3.update(d1)
#####1 lines ###########################
d3={**d,**d1}

print("d3:- ",d3)
print(id(d3),type(d3),len(d3))


print(d3 is d)#F
print(d3 is d1)#F
##############################################
d={'name':'Manish',('dept','other'):[["L&D"],[1,2,3]],'name':["Manish",'Rahul','SitaRama'],
   4576563447.78:'%*#%(*(sghdh$&98855JBJ8^%$)'}
print("d:- ",d)
print(id(d),type(d),len(d))
#############delete####################
# del d['name']
d.pop('name1',None)
print("d:- ",d)
print(id(d),type(d),len(d))
#######update an existing key name > NewName ?
#output :- {('dept', 'other'): [['L&D'], [1, 2, 3]], 4576563447.78: '%*#%(*(sghdh$&98855JBJ8^%$)','NewName': ['Manish', 'Rahul', 'SitaRama']}
##############################################

d={'name':'Manish',('dept','other'):[["L&D"],[1,2,3]],'name':["Manish",'Rahul','SitaRama'],
   4576563447.78:'%*#%(*(sghdh$&98855JBJ8^%$)'}
print("d:- ",d)
print(id(d),type(d),len(d))
#############delete####################
# del d['name']
# d.pop('name1',None)

#######update an existing key name > NewName ?
#output :- {('dept', 'other'): [['L&D'], [1, 2, 3]], 4576563447.78: '%*#%(*(sghdh$&98855JBJ8^%$)','NewName': ['Manish', 'Rahul', 'SitaRama']}
# d['NewName']=d['name']
# del d['name']
d['NewName']=d.pop('name')


print("d:- ",d)
print(id(d),type(d),len(d))

######################################################################
# g=[1,1.2,(67,89),"Hello",90,90,90,"Hello",1,1.2]
# print(g)
# print(len(g),type(g))
# a=set(g)
a={1, 1.2, (67, 89), 'Hello', 90}
print(a)
print(id(a),type(a),len(a))
a.add("Test")
a.discard("Hello")
print(a)
print(id(a),type(a),len(a))
###############################
for i in a:
    print(i)
#########################################################
def demo():
    print("This is demo function")
    dept="L&D"
    age=67
    dept12=["L&D"]
    return age,dept #{'dept':dept,"age":age}#[age,dept]
    
    
m=demo()#calling of the function.
print(m,type(m))
if type(m)==tuple or type(m)==list:
    #indexing 
    dept=m[1]
    print("Dept:-",dept)
elif type(m)==dict:
    #keys
    dept=m['dept']
    print("Dept:-",dept)

##########################################################
def details(fname,lname,age):
    name=fname+' '+lname 
    return name,age

#positional argument
v=details('Manish','Sharma',89)
print(v)

v1=details('Raj','Meena',56)
print(v1)
###########################################
def details(fname,lname,age):
    name=fname+' '+lname 
    return name,age

#keyword argument
v=details(lname='Sharma',fname='Manish',age=89)
print(v)

v1=details(age=56,fname='Raj',lname='Meena')
print(v1

####################################################
def details(fname,lname,age):
    name=fname+' '+lname 
    return name,age

#positional argument+keyword argument
v=details('Manish',age=89,lname='Sharma')
print(v)

v1=details('Raj','Meena',age=56)
print(v1)
##############################################
"""
print('Manish',"Sharma",sep='===',end=' ')
print("Hello")


print('Manish',"Sharma",end=' ',sep='===')
print("Hello")


print(end=' ','Manish',"Sharma",sep='===')#Error 
print("Hello")
"""
#######################################################
# non-default argument+default argument
def details(fname,lname="Teena",age=21):
    name=fname+' '+lname 
    return name,age

#positional argument+keyword argument
v=details('Manish',age=89,lname='Sharma')
print(v)

v1=details('Raj')
print(v1)
###############################################
def details(fname,lname,age,*marks,**subjects): #*args > tuple , #**kwargs > dict
    name=fname+' '+lname 
    return name,age,marks,subjects



v1=details('Raj','Meena',56,89,78,67,89,math=67,arts=90,science=78)
print(v1)
############################################
# non-default argument+default argument
def details(fname="sun",lname="Teena",age=21):
    global name
    name=fname+' '+lname # func variable scope > local
    out="Copy1" # func variable scope > local , func always give preference to their local variable over any global vaiable.
    return name,age,out

out="Book" # Script Variable Scope > Global
#positional argument+keyword argument
v=details('Manish',age=89,lname='Sharma')
print(v)#Copy1
print(out)#Book
print(name)
################################################
# non-default argument+default argument
def details(fname="sun",lname="Teena",age=21):
    global name,out
    name=fname+' '+lname # func variable scope > local
    out="Copy1" # func variable scope > local , func always give preference to their local variable over any global vaiable.
    return name,age,out

out="Book" # Script Variable Scope > Global
#positional argument+keyword argument
v=details('Manish',age=89,lname='Sharma')
print(v)#Copy1
print(out)#Copy1
print(name)
##################################################


